{"version":3,"sources":["components/Todos.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","className","key","id","onClick","title","content","AddTodo","state","validateInput","isError","_this","console","log","handleChange","event","input","document","querySelector","setState","target","value","classList","handleSubmit","preventDefault","form","add","props","addTodo","onSubmit","this","type","name","placeholder","onChange","htmlFor","data-error","data-success","Component","App","filter","Math","random","concat","Object","toConsumableArray","components_Todos","components_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAyBeA,EAvBD,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,WAChBC,EAAWF,EAAMG,OACrBH,EAAMI,IAAI,SAAAC,GACR,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAKM,IACzCL,EAAAC,EAAAC,cAAA,QAAMI,QAAS,WAAMX,EAAWI,EAAKM,MACnCL,EAAAC,EAAAC,cAAA,KAAGK,MAAM,cAAcJ,UAAU,yBAAjC,WAEAJ,EAAKS,WAKbR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,gCAGF,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZP,IC4DQa,6MA7EbC,MAAQ,CACNF,QAAS,MAGXG,cAAgB,WACd,IAAIC,GAAU,EAMd,OALIC,EAAKH,MAAMF,QAAQX,OAAS,IAC9BiB,QAAQC,IAAI,sBACZD,QAAQC,IAAI,kBAAmBF,EAAKH,MAAMF,QAAQX,QAClDe,GAAU,GAELA,KAETI,aAAe,SAACC,GACd,IAAIC,EAAQC,SAASC,cAAc,SAEnCP,EAAKQ,SAAS,CACZb,QAASS,EAAMK,OAAOC,QAGxBL,EAAMM,UAAY,MAEpBC,aAAe,SAACR,GACdA,EAAMS,iBACNZ,QAAQC,IAAI,kBACZD,QAAQC,IAAI,QAASF,EAAKH,OAC1B,IAAIiB,EAAOR,SAASC,cAAc,QAExBP,EAAKF,iBAUbG,QAAQC,IAAI,sBAEZY,EAAK5B,KAAKyB,UAAUI,IAAI,aAVxBd,QAAQC,IAAI,YAEZF,EAAKgB,MAAMC,QAAQjB,EAAKH,OAExBG,EAAKQ,SAAS,CACZb,QAAS,+EAUb,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAU4B,SAAUC,KAAKP,cACvCzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,SACE+B,KAAK,OACL5B,GAAG,OACHF,UAAU,WACV+B,KAAK,OACLC,YAAY,eACZC,SAAUJ,KAAKhB,aACfO,MAAOS,KAAKtB,MAAMF,UAEpBR,EAAAC,EAAAC,cAAA,SAAOmC,QAAQ,QAAf,QACArC,EAAAC,EAAAC,cAAA,QACEC,UAAU,cACVmC,aAAW,4BACXC,eAAa,WAHf,iBAOJvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAA+B8B,KAAK,UAAtD,SAEEjC,EAAAC,EAAAC,cAAA,KAAGK,MAAM,WAAWJ,UAAU,wBAA9B,kBAtEUqC,aCmCPC,6MAhCb/B,MAAQ,CACNhB,MAAO,CACL,CAAEW,GAAI,EAAGG,QAAS,0BAClB,CAAEH,GAAI,EAAGG,QAAS,0DAGtBb,WAAa,SAACU,GACZ,IAAMX,EAAQmB,EAAKH,MAAMhB,MAAMgD,OAAO,SAAA3C,GACpC,OAAOA,EAAKM,KAAOA,IAErBQ,EAAKQ,SAAS,CACZ3B,aAGJoC,QAAU,SAAC/B,GACTA,EAAKM,GAAKsC,KAAKC,SACf,IAAIlD,EAAK,GAAAmD,OAAAC,OAAAC,EAAA,EAAAD,CAAOjC,EAAKH,MAAMhB,OAAlB,CAAyBK,IAClCc,EAAKQ,SAAS,CACZ3B,mFAIF,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,UACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAOtD,MAAOsC,KAAKtB,MAAMhB,MAAOC,WAAYqC,KAAKrC,aACjDK,EAAAC,EAAAC,cAAC+C,EAAD,CAASnB,QAASE,KAAKF,kBA3BbU,aCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAAStC,SAASuC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.42e94f9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n  const todoList = todos.length ? (\r\n    todos.map(todo => {\r\n      return (\r\n        <div className=\"collection-item\" key={todo.id}>\r\n          <span onClick={()=>{ deleteTodo(todo.id) }}>\r\n            <i title=\"Delete todo\" className=\"material-icons cancel\">cancel</i>\r\n          </span>\r\n           {todo.content}\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <p className=\"center\">You have no todos left, yay!</p>\r\n  )\r\n\r\n  return (\r\n    <div className=\"todos collection\">\r\n      {todoList}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Todos;","import React, {Component} from 'react';\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    content: ''\r\n  }\r\n  // return true iff state.content.length < 1\r\n  validateInput = () => {\r\n    let isError = false;\r\n    if (this.state.content.length < 1) {\r\n      console.log('there was an error');\r\n      console.log('length of input', this.state.content.length);\r\n      isError = true;\r\n    }\r\n    return isError;\r\n  }\r\n  handleChange = (event) => {\r\n    let input = document.querySelector('input');\r\n    // update this.state.content\r\n    this.setState({\r\n      content: event.target.value\r\n    });\r\n    // remove valid or invalid class if there is any\r\n    input.classList = '';\r\n  }\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log('form submitted');\r\n    console.log('state', this.state);\r\n    let form = document.querySelector('form');\r\n    // error validation\r\n    let err = this.validateInput();\r\n    if (!err) {\r\n      console.log('no error');\r\n      // call parent component function to update state\r\n      this.props.addTodo(this.state);\r\n      // clear form\r\n      this.setState({\r\n        content: ''\r\n      });\r\n    } else {\r\n      console.log('there was an error');\r\n      // set materialize css class for error\r\n      form.todo.classList.add('invalid');\r\n    }\r\n    return;\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <form className=\"col s12\" onSubmit={this.handleSubmit}>\r\n          <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"todo\"\r\n                className=\"validate\"\r\n                name=\"todo\"\r\n                placeholder=\"Enter a todo\"\r\n                onChange={this.handleChange}\r\n                value={this.state.content}\r\n              />\r\n              <label htmlFor=\"todo\">Todo</label>\r\n              <span\r\n                className=\"helper-text\"\r\n                data-error=\"Please enter a valid todo\"\r\n                data-success=\"success\"\r\n              >Helper text</span>\r\n            </div>\r\n          </div>\r\n          <button className=\"btn waves-effect waves-light\" type=\"submit\">\r\n            Submit\r\n            <i title=\"Add todo\" className=\"material-icons right\">send</i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default AddTodo;","import React, {Component} from 'react';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\n\nclass App extends Component {\n  state = {\n    todos: [\n      { id: 1, content: 'Play some video games.' },\n      { id: 2, content: 'Learn the basics of React by the end of the month.' }\n    ]\n  }\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n    this.setState({\n      todos\n    });\n  }\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo];\n    this.setState({\n      todos\n    });\n  }\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"center blue-text\">Todos:</h1>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddTodo addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}